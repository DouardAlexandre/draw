#!/usr/bin/env node

/**
 * Module dependencies.
 */

 var app = require('../app');
 var debug = require('debug')('draw:server');

 // Create HTTP server.
 var http = require('http').Server(app);

 // Create a Socket.IO server and attach it to the http server
 const io = require('socket.io')(http);

 //Get port from environment and store in Express.
 var port = normalizePort(process.env.PORT || '3000');
 app.set('port', port);
 // Socket now listening to HTTP server

 var roomno = 1;

 var numUsers = 0;

 //broadcast drawing
 io.on('connection', function(socket){



  //console.log('a user has joined socket');

  

  //Increase roomno if 2 clients are present in a room.
  if(io.nsps['/'].adapter.rooms["room-"+roomno] && io.nsps['/'].adapter.rooms["room-"+roomno].length > 1 ) roomno++;

 console.log('num room ='+roomno);



 socket.join("room-"+roomno);

 
 socket.on('drawing', (data) => socket.in("room-"+roomno).emit('drawing', data));
 

  //Send this event to everyone in the room.
  //io.sockets.in("room-"+roomno).emit('connectToRoom', "You are in room no. "+roomno);
  
  //console.log(roomno);
  //console.log(User);
  /*io.clients((error, clients) => {

    if (error) throw error;
    console.log(clients);

    if(clients === 2) {
      console.log(clients);
    } 

  });*/
  socket.on('disconnec', (reason) => {
    socket.leave("room-"+roomno);
    //let rooms = Object.keys(socket.rooms);
    console.log('out');
  });




});




//users room
/*function Connection(client){

 client.on('connection', function(id){
  user++;
  console.log(id);
  console.log('user++');
  client.on('disconnect', function(){
    console.log('a user has lived');
  });
});
 
}*/



/*socket.on('create', function (room) {
  socket.join(room);
});*/


/**
 * Listen on provided port, on all network interfaces.
 */

 http.listen(port, () => console.log('listening on port ' + port));
 http.on('error', onError);
 http.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

 function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

 function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
  ? 'Pipe ' + port
  : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
    case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
    default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

 function onListening() {
  var addr = http.address();
  var bind = typeof addr === 'string'
  ? 'pipe ' + addr
  : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
