#!/usr/bin/env node

/**
 * Module dependencies.
 */

 var app = require('../app');
 var debug = require('debug')('draw:server');

 // Create HTTP server.
 var http = require('http').Server(app);

 // Create a Socket.IO server and attach it to the http server
 var io = require('socket.io')(http);

 //Get port from environment and store in Express.
 var port = normalizePort(process.env.PORT || '3000');
 app.set('port', port);
 var user = 0;
// Socket now listening to HTTP server
function onConnection(socket){

 

  socket.on('drawing', (data) => socket.broadcast.emit('drawing', data));
  


}

io.on('connection', onConnection);

/*socket.on('create', function (room) {
  socket.join(room);
});*/


/**
 * Listen on provided port, on all network interfaces.
 */

 http.listen(port, () => console.log('listening on port ' + port));
 http.on('error', onError);
 http.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

 function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

 function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
  ? 'Pipe ' + port
  : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
    case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
    default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

 function onListening() {
  var addr = http.address();
  var bind = typeof addr === 'string'
  ? 'pipe ' + addr
  : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
