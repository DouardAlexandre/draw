#!/usr/bin/env node

/**
 * Module dependencies.
 */

 var app = require('../app');
 var debug = require('debug')('draw:server');

 // Create HTTP server.
 var http = require('http').Server(app);

 // Create a Socket.IO server and attach it to the http server
 const io = require('socket.io')(http);

 //Get port from environment and store in Express.
 var port = normalizePort(process.env.PORT || '3000');
 app.set('port', port);
 // Socket now listening to HTTP server

 var num = 1;
 var words = ["poire", "pomme","maison","poire","oeil","araignée","éclair"];
 var round = 0;

 //broadcast drawing
 io.on('connection', function(socket){



  socket.on('start', (start) => {

   var room = 'room-'+num;


    socket.join(room);  //   room 1 room creation

    console.log('drawing to room '+num);

    // first client
    if(io.of('/').adapter.rooms[room].length === 1 ){

      var wait = "wait for other player";
      socket.emit('wait', wait);
    };

    // second client
    if(io.of('/').adapter.rooms[room].length > 1 ){

     var randWord = words[Math.floor(Math.random() * words.length)];
     guess = "Dessinez : "+ randWord;
     socket.emit('guess', guess);
     io.to(room).emit('noWait',randWord);

     socket.on('end', function(data){ 
      io.emit('end', data);
    }); 
     socket.on('drawing', function(data){ 
      io.to(room).emit('drawing', data);
    }); 

     num++;

   };

   console.log(socket.rooms);
 //end game
 socket.on('textInput', function(textInput, randWord){ 

   if(textInput === randWord) {
     io.to(room).emit('end');
   }else{
    var wrong = ["Pas vraiment", "C'est pas ça...","L'important c'est de participer","La prochaine fois peut-être","Il dessine si mal que ça?"];
    var randWrong = wrong[Math.floor(Math.random() * wrong.length)];
    socket.emit('wrong', randWrong);
    console.log(randWrong);
    round++;
    if(round===3) {
     round=0;
     io.to(room).emit('end');
   }
 }

}); 






 socket.on('disconnect', function() {console.log('outttttttttt')});   


});

}); 



/**
 * Listen on provided port, on all network interfaces.
 */

 http.listen(port, () => console.log('listening on port ' + port));
 http.on('error', onError);
 http.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

 function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

 function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
  ? 'Pipe ' + port
  : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
    case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
    default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

 function onListening() {
  var addr = http.address();
  var bind = typeof addr === 'string'
  ? 'pipe ' + addr
  : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

